/*
 * generated by Xtext 2.24.0
 */
package com.karalisoft.serializer;

import com.google.inject.Inject;
import com.karalisoft.services.ScadGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ScadSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ScadGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CubeParams___CenterKeyword_1_1_0_0_EqualsSignKeyword_1_1_0_1__q;
	protected AbstractElementAlias match_CubeParams___SizeKeyword_1_0_0_0_EqualsSignKeyword_1_0_0_1__q;
	protected AbstractElementAlias match_Cube_SemicolonKeyword_1_4_p;
	protected AbstractElementAlias match_CylinderParams___CenterKeyword_1_10_0_0_EqualsSignKeyword_1_10_0_1__q;
	protected AbstractElementAlias match_Cylinder_SemicolonKeyword_1_4_p;
	protected AbstractElementAlias match_Difference_SemicolonKeyword_1_6_a;
	protected AbstractElementAlias match_Function_SemicolonKeyword_5_a;
	protected AbstractElementAlias match_Intersection_SemicolonKeyword_1_6_a;
	protected AbstractElementAlias match_Module_SemicolonKeyword_6_a;
	protected AbstractElementAlias match_Sphere_SemicolonKeyword_1_4_p;
	protected AbstractElementAlias match_TransformedModuleOrFunctionCall_SemicolonKeyword_5_a;
	protected AbstractElementAlias match_TransformedShape_SemicolonKeyword_5_a;
	protected AbstractElementAlias match_Union_SemicolonKeyword_1_6_a;
	protected AbstractElementAlias match_UseOrInclude_IncludeKeyword_1_1_or_UseKeyword_1_0;
	protected AbstractElementAlias match_UseOrInclude_SemicolonKeyword_7_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ScadGrammarAccess) access;
		match_CubeParams___CenterKeyword_1_1_0_0_EqualsSignKeyword_1_1_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCubeParamsAccess().getCenterKeyword_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getCubeParamsAccess().getEqualsSignKeyword_1_1_0_1()));
		match_CubeParams___SizeKeyword_1_0_0_0_EqualsSignKeyword_1_0_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCubeParamsAccess().getSizeKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getCubeParamsAccess().getEqualsSignKeyword_1_0_0_1()));
		match_Cube_SemicolonKeyword_1_4_p = new TokenAlias(true, false, grammarAccess.getCubeAccess().getSemicolonKeyword_1_4());
		match_CylinderParams___CenterKeyword_1_10_0_0_EqualsSignKeyword_1_10_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCylinderParamsAccess().getCenterKeyword_1_10_0_0()), new TokenAlias(false, false, grammarAccess.getCylinderParamsAccess().getEqualsSignKeyword_1_10_0_1()));
		match_Cylinder_SemicolonKeyword_1_4_p = new TokenAlias(true, false, grammarAccess.getCylinderAccess().getSemicolonKeyword_1_4());
		match_Difference_SemicolonKeyword_1_6_a = new TokenAlias(true, true, grammarAccess.getDifferenceAccess().getSemicolonKeyword_1_6());
		match_Function_SemicolonKeyword_5_a = new TokenAlias(true, true, grammarAccess.getFunctionAccess().getSemicolonKeyword_5());
		match_Intersection_SemicolonKeyword_1_6_a = new TokenAlias(true, true, grammarAccess.getIntersectionAccess().getSemicolonKeyword_1_6());
		match_Module_SemicolonKeyword_6_a = new TokenAlias(true, true, grammarAccess.getModuleAccess().getSemicolonKeyword_6());
		match_Sphere_SemicolonKeyword_1_4_p = new TokenAlias(true, false, grammarAccess.getSphereAccess().getSemicolonKeyword_1_4());
		match_TransformedModuleOrFunctionCall_SemicolonKeyword_5_a = new TokenAlias(true, true, grammarAccess.getTransformedModuleOrFunctionCallAccess().getSemicolonKeyword_5());
		match_TransformedShape_SemicolonKeyword_5_a = new TokenAlias(true, true, grammarAccess.getTransformedShapeAccess().getSemicolonKeyword_5());
		match_Union_SemicolonKeyword_1_6_a = new TokenAlias(true, true, grammarAccess.getUnionAccess().getSemicolonKeyword_1_6());
		match_UseOrInclude_IncludeKeyword_1_1_or_UseKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUseOrIncludeAccess().getIncludeKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getUseOrIncludeAccess().getUseKeyword_1_0()));
		match_UseOrInclude_SemicolonKeyword_7_a = new TokenAlias(true, true, grammarAccess.getUseOrIncludeAccess().getSemicolonKeyword_7());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CubeParams___CenterKeyword_1_1_0_0_EqualsSignKeyword_1_1_0_1__q.equals(syntax))
				emit_CubeParams___CenterKeyword_1_1_0_0_EqualsSignKeyword_1_1_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CubeParams___SizeKeyword_1_0_0_0_EqualsSignKeyword_1_0_0_1__q.equals(syntax))
				emit_CubeParams___SizeKeyword_1_0_0_0_EqualsSignKeyword_1_0_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Cube_SemicolonKeyword_1_4_p.equals(syntax))
				emit_Cube_SemicolonKeyword_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CylinderParams___CenterKeyword_1_10_0_0_EqualsSignKeyword_1_10_0_1__q.equals(syntax))
				emit_CylinderParams___CenterKeyword_1_10_0_0_EqualsSignKeyword_1_10_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Cylinder_SemicolonKeyword_1_4_p.equals(syntax))
				emit_Cylinder_SemicolonKeyword_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Difference_SemicolonKeyword_1_6_a.equals(syntax))
				emit_Difference_SemicolonKeyword_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Function_SemicolonKeyword_5_a.equals(syntax))
				emit_Function_SemicolonKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Intersection_SemicolonKeyword_1_6_a.equals(syntax))
				emit_Intersection_SemicolonKeyword_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Module_SemicolonKeyword_6_a.equals(syntax))
				emit_Module_SemicolonKeyword_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sphere_SemicolonKeyword_1_4_p.equals(syntax))
				emit_Sphere_SemicolonKeyword_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransformedModuleOrFunctionCall_SemicolonKeyword_5_a.equals(syntax))
				emit_TransformedModuleOrFunctionCall_SemicolonKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransformedShape_SemicolonKeyword_5_a.equals(syntax))
				emit_TransformedShape_SemicolonKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Union_SemicolonKeyword_1_6_a.equals(syntax))
				emit_Union_SemicolonKeyword_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UseOrInclude_IncludeKeyword_1_1_or_UseKeyword_1_0.equals(syntax))
				emit_UseOrInclude_IncludeKeyword_1_1_or_UseKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UseOrInclude_SemicolonKeyword_7_a.equals(syntax))
				emit_UseOrInclude_SemicolonKeyword_7_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('center' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) center='false'
	 *     (rule start) (ambiguity) center='true'
	 */
	protected void emit_CubeParams___CenterKeyword_1_1_0_0_EqualsSignKeyword_1_1_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('size' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' x=Double
	 *     (rule start) (ambiguity) size=Double
	 */
	protected void emit_CubeParams___SizeKeyword_1_0_0_0_EqualsSignKeyword_1_0_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'cube' '(' ')' (ambiguity) (rule start)
	 *     cubeParams+=CubeParams ')' (ambiguity) (rule end)
	 */
	protected void emit_Cube_SemicolonKeyword_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('center' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) center='false'
	 *     (rule start) (ambiguity) center='true'
	 */
	protected void emit_CylinderParams___CenterKeyword_1_10_0_0_EqualsSignKeyword_1_10_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'cylinder' '(' ')' (ambiguity) (rule start)
	 *     cylinderParams+=CylinderParams ')' (ambiguity) (rule end)
	 */
	protected void emit_Cylinder_SemicolonKeyword_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'difference' '(' ')' '{' '}' (ambiguity) (rule start)
	 *     shapes+=ModuleOrFunctionCall '}' (ambiguity) (rule end)
	 *     shapes+=Shape '}' (ambiguity) (rule end)
	 *     shapes+=TransformedModuleOrFunctionCall '}' (ambiguity) (rule end)
	 */
	protected void emit_Difference_SemicolonKeyword_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' (ambiguity) (rule end)
	 */
	protected void emit_Function_SemicolonKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'intersection' '(' ')' '{' '}' (ambiguity) (rule start)
	 *     shapes+=ModuleOrFunctionCall '}' (ambiguity) (rule end)
	 *     shapes+=Shape '}' (ambiguity) (rule end)
	 *     shapes+=TransformedModuleOrFunctionCall '}' (ambiguity) (rule end)
	 */
	protected void emit_Intersection_SemicolonKeyword_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     blocks+=Function '}' (ambiguity) (rule end)
	 *     blocks+=Module '}' (ambiguity) (rule end)
	 *     blocks+=ModuleOrFunctionCall '}' (ambiguity) (rule end)
	 *     blocks+=Shape '}' (ambiguity) (rule end)
	 *     blocks+=TransformedModuleOrFunctionCall '}' (ambiguity) (rule end)
	 *     name=ID '(' ')' '{' '}' (ambiguity) (rule end)
	 */
	protected void emit_Module_SemicolonKeyword_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'sphere' '(' ')' (ambiguity) (rule start)
	 *     sphereParams+=SphereParams ')' (ambiguity) (rule end)
	 */
	protected void emit_Sphere_SemicolonKeyword_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     impl+=ModuleOrFunctionCall '}' (ambiguity) (rule end)
	 */
	protected void emit_TransformedModuleOrFunctionCall_SemicolonKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     impl+=Shape '}' (ambiguity) (rule end)
	 */
	protected void emit_TransformedShape_SemicolonKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'union' '(' ')' '{' '}' (ambiguity) (rule start)
	 *     shapes+=ModuleOrFunctionCall '}' (ambiguity) (rule end)
	 *     shapes+=Shape '}' (ambiguity) (rule end)
	 *     shapes+=TransformedModuleOrFunctionCall '}' (ambiguity) (rule end)
	 */
	protected void emit_Union_SemicolonKeyword_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'use' | 'include'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '<' ID '.' ID '>' ';'* (rule start)
	 */
	protected void emit_UseOrInclude_IncludeKeyword_1_1_or_UseKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('use' | 'include') '<' ID '.' ID '>' (ambiguity) (rule start)
	 */
	protected void emit_UseOrInclude_SemicolonKeyword_7_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
