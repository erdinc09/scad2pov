/**
 * generated by Xtext 2.24.0
 */
package com.karalisoft.scad.util;

import com.karalisoft.scad.Cube;
import com.karalisoft.scad.CubeParams;
import com.karalisoft.scad.Cylinder;
import com.karalisoft.scad.CylinderParams;
import com.karalisoft.scad.Difference;
import com.karalisoft.scad.Function;
import com.karalisoft.scad.Intersection;
import com.karalisoft.scad.Model;
import com.karalisoft.scad.ModuleOrFunction;
import com.karalisoft.scad.ModuleOrFunctionCall;
import com.karalisoft.scad.Rotate;
import com.karalisoft.scad.ScadPackage;
import com.karalisoft.scad.Scale;
import com.karalisoft.scad.Shape;
import com.karalisoft.scad.Sphere;
import com.karalisoft.scad.SphereParams;
import com.karalisoft.scad.Transformation;
import com.karalisoft.scad.TransformedModuleOrFunctionCall;
import com.karalisoft.scad.TransformedShape;
import com.karalisoft.scad.Translate;
import com.karalisoft.scad.Union;
import com.karalisoft.scad.UseOrInclude;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.karalisoft.scad.ScadPackage
 * @generated
 */
public class ScadSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ScadPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScadSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ScadPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ScadPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.MODULE_OR_FUNCTION:
      {
        ModuleOrFunction moduleOrFunction = (ModuleOrFunction)theEObject;
        T result = caseModuleOrFunction(moduleOrFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.USE_OR_INCLUDE:
      {
        UseOrInclude useOrInclude = (UseOrInclude)theEObject;
        T result = caseUseOrInclude(useOrInclude);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.MODULE:
      {
        com.karalisoft.scad.Module module = (com.karalisoft.scad.Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = caseModuleOrFunction(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = caseModuleOrFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.MODULE_OR_FUNCTION_CALL:
      {
        ModuleOrFunctionCall moduleOrFunctionCall = (ModuleOrFunctionCall)theEObject;
        T result = caseModuleOrFunctionCall(moduleOrFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.TRANSFORMATION:
      {
        Transformation transformation = (Transformation)theEObject;
        T result = caseTransformation(transformation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.TRANSLATE:
      {
        Translate translate = (Translate)theEObject;
        T result = caseTranslate(translate);
        if (result == null) result = caseTransformation(translate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.ROTATE:
      {
        Rotate rotate = (Rotate)theEObject;
        T result = caseRotate(rotate);
        if (result == null) result = caseTransformation(rotate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.SCALE:
      {
        Scale scale = (Scale)theEObject;
        T result = caseScale(scale);
        if (result == null) result = caseTransformation(scale);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.SHAPE:
      {
        Shape shape = (Shape)theEObject;
        T result = caseShape(shape);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.TRANSFORMED_SHAPE:
      {
        TransformedShape transformedShape = (TransformedShape)theEObject;
        T result = caseTransformedShape(transformedShape);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.TRANSFORMED_MODULE_OR_FUNCTION_CALL:
      {
        TransformedModuleOrFunctionCall transformedModuleOrFunctionCall = (TransformedModuleOrFunctionCall)theEObject;
        T result = caseTransformedModuleOrFunctionCall(transformedModuleOrFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.SPHERE:
      {
        Sphere sphere = (Sphere)theEObject;
        T result = caseSphere(sphere);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.SPHERE_PARAMS:
      {
        SphereParams sphereParams = (SphereParams)theEObject;
        T result = caseSphereParams(sphereParams);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.CYLINDER:
      {
        Cylinder cylinder = (Cylinder)theEObject;
        T result = caseCylinder(cylinder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.CYLINDER_PARAMS:
      {
        CylinderParams cylinderParams = (CylinderParams)theEObject;
        T result = caseCylinderParams(cylinderParams);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.CUBE:
      {
        Cube cube = (Cube)theEObject;
        T result = caseCube(cube);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.CUBE_PARAMS:
      {
        CubeParams cubeParams = (CubeParams)theEObject;
        T result = caseCubeParams(cubeParams);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.UNION:
      {
        Union union = (Union)theEObject;
        T result = caseUnion(union);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.INTERSECTION:
      {
        Intersection intersection = (Intersection)theEObject;
        T result = caseIntersection(intersection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ScadPackage.DIFFERENCE:
      {
        Difference difference = (Difference)theEObject;
        T result = caseDifference(difference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Or Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Or Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleOrFunction(ModuleOrFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Use Or Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Use Or Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUseOrInclude(UseOrInclude object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(com.karalisoft.scad.Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Or Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Or Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleOrFunctionCall(ModuleOrFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformation(Transformation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Translate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Translate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTranslate(Translate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rotate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rotate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRotate(Rotate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scale</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scale</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScale(Scale object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shape</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shape</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShape(Shape object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformed Shape</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformed Shape</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformedShape(TransformedShape object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformed Module Or Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformed Module Or Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformedModuleOrFunctionCall(TransformedModuleOrFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sphere</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sphere</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSphere(Sphere object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sphere Params</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sphere Params</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSphereParams(SphereParams object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cylinder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cylinder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCylinder(Cylinder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cylinder Params</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cylinder Params</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCylinderParams(CylinderParams object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cube</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cube</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCube(Cube object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cube Params</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cube Params</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCubeParams(CubeParams object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Union</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Union</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnion(Union object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Intersection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Intersection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntersection(Intersection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Difference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Difference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDifference(Difference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ScadSwitch
