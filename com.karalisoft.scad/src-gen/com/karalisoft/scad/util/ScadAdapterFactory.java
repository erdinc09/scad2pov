/**
 * generated by Xtext 2.24.0
 */
package com.karalisoft.scad.util;

import com.karalisoft.scad.Cube;
import com.karalisoft.scad.CubeParams;
import com.karalisoft.scad.Cylinder;
import com.karalisoft.scad.CylinderParams;
import com.karalisoft.scad.Difference;
import com.karalisoft.scad.Function;
import com.karalisoft.scad.Intersection;
import com.karalisoft.scad.Model;
import com.karalisoft.scad.ModuleOrFunction;
import com.karalisoft.scad.ModuleOrFunctionCall;
import com.karalisoft.scad.Rotate;
import com.karalisoft.scad.ScadPackage;
import com.karalisoft.scad.Scale;
import com.karalisoft.scad.Shape;
import com.karalisoft.scad.Sphere;
import com.karalisoft.scad.SphereParams;
import com.karalisoft.scad.Transformation;
import com.karalisoft.scad.TransformedModuleOrFunctionCall;
import com.karalisoft.scad.TransformedShape;
import com.karalisoft.scad.Translate;
import com.karalisoft.scad.Union;
import com.karalisoft.scad.UseOrInclude;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.karalisoft.scad.ScadPackage
 * @generated
 */
public class ScadAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ScadPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScadAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ScadPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScadSwitch<Adapter> modelSwitch =
    new ScadSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseModuleOrFunction(ModuleOrFunction object)
      {
        return createModuleOrFunctionAdapter();
      }
      @Override
      public Adapter caseUseOrInclude(UseOrInclude object)
      {
        return createUseOrIncludeAdapter();
      }
      @Override
      public Adapter caseModule(com.karalisoft.scad.Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseModuleOrFunctionCall(ModuleOrFunctionCall object)
      {
        return createModuleOrFunctionCallAdapter();
      }
      @Override
      public Adapter caseTransformation(Transformation object)
      {
        return createTransformationAdapter();
      }
      @Override
      public Adapter caseTranslate(Translate object)
      {
        return createTranslateAdapter();
      }
      @Override
      public Adapter caseRotate(Rotate object)
      {
        return createRotateAdapter();
      }
      @Override
      public Adapter caseScale(Scale object)
      {
        return createScaleAdapter();
      }
      @Override
      public Adapter caseShape(Shape object)
      {
        return createShapeAdapter();
      }
      @Override
      public Adapter caseTransformedShape(TransformedShape object)
      {
        return createTransformedShapeAdapter();
      }
      @Override
      public Adapter caseTransformedModuleOrFunctionCall(TransformedModuleOrFunctionCall object)
      {
        return createTransformedModuleOrFunctionCallAdapter();
      }
      @Override
      public Adapter caseSphere(Sphere object)
      {
        return createSphereAdapter();
      }
      @Override
      public Adapter caseSphereParams(SphereParams object)
      {
        return createSphereParamsAdapter();
      }
      @Override
      public Adapter caseCylinder(Cylinder object)
      {
        return createCylinderAdapter();
      }
      @Override
      public Adapter caseCylinderParams(CylinderParams object)
      {
        return createCylinderParamsAdapter();
      }
      @Override
      public Adapter caseCube(Cube object)
      {
        return createCubeAdapter();
      }
      @Override
      public Adapter caseCubeParams(CubeParams object)
      {
        return createCubeParamsAdapter();
      }
      @Override
      public Adapter caseUnion(Union object)
      {
        return createUnionAdapter();
      }
      @Override
      public Adapter caseIntersection(Intersection object)
      {
        return createIntersectionAdapter();
      }
      @Override
      public Adapter caseDifference(Difference object)
      {
        return createDifferenceAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.ModuleOrFunction <em>Module Or Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.ModuleOrFunction
   * @generated
   */
  public Adapter createModuleOrFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.UseOrInclude <em>Use Or Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.UseOrInclude
   * @generated
   */
  public Adapter createUseOrIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.ModuleOrFunctionCall <em>Module Or Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.ModuleOrFunctionCall
   * @generated
   */
  public Adapter createModuleOrFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Transformation <em>Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Transformation
   * @generated
   */
  public Adapter createTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Translate <em>Translate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Translate
   * @generated
   */
  public Adapter createTranslateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Rotate <em>Rotate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Rotate
   * @generated
   */
  public Adapter createRotateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Scale <em>Scale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Scale
   * @generated
   */
  public Adapter createScaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Shape <em>Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Shape
   * @generated
   */
  public Adapter createShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.TransformedShape <em>Transformed Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.TransformedShape
   * @generated
   */
  public Adapter createTransformedShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.TransformedModuleOrFunctionCall <em>Transformed Module Or Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.TransformedModuleOrFunctionCall
   * @generated
   */
  public Adapter createTransformedModuleOrFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Sphere <em>Sphere</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Sphere
   * @generated
   */
  public Adapter createSphereAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.SphereParams <em>Sphere Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.SphereParams
   * @generated
   */
  public Adapter createSphereParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Cylinder <em>Cylinder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Cylinder
   * @generated
   */
  public Adapter createCylinderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.CylinderParams <em>Cylinder Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.CylinderParams
   * @generated
   */
  public Adapter createCylinderParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Cube <em>Cube</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Cube
   * @generated
   */
  public Adapter createCubeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.CubeParams <em>Cube Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.CubeParams
   * @generated
   */
  public Adapter createCubeParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Union <em>Union</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Union
   * @generated
   */
  public Adapter createUnionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Intersection <em>Intersection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Intersection
   * @generated
   */
  public Adapter createIntersectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.karalisoft.scad.Difference <em>Difference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.karalisoft.scad.Difference
   * @generated
   */
  public Adapter createDifferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ScadAdapterFactory
