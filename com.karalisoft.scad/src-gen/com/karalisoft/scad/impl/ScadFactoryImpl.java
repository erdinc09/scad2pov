/**
 * generated by Xtext 2.24.0
 */
package com.karalisoft.scad.impl;

import com.karalisoft.scad.Cube;
import com.karalisoft.scad.CubeParams;
import com.karalisoft.scad.Cylinder;
import com.karalisoft.scad.CylinderParams;
import com.karalisoft.scad.Difference;
import com.karalisoft.scad.Function;
import com.karalisoft.scad.Intersection;
import com.karalisoft.scad.Model;
import com.karalisoft.scad.ModuleOrFunction;
import com.karalisoft.scad.ModuleOrFunctionCall;
import com.karalisoft.scad.Rotate;
import com.karalisoft.scad.ScadFactory;
import com.karalisoft.scad.ScadPackage;
import com.karalisoft.scad.Scale;
import com.karalisoft.scad.Shape;
import com.karalisoft.scad.Sphere;
import com.karalisoft.scad.SphereParams;
import com.karalisoft.scad.Transformation;
import com.karalisoft.scad.TransformedModuleOrFunctionCall;
import com.karalisoft.scad.TransformedShape;
import com.karalisoft.scad.Translate;
import com.karalisoft.scad.Union;
import com.karalisoft.scad.UseOrInclude;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ScadFactoryImpl extends EFactoryImpl implements ScadFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ScadFactory init()
  {
    try
    {
      ScadFactory theScadFactory = (ScadFactory)EPackage.Registry.INSTANCE.getEFactory(ScadPackage.eNS_URI);
      if (theScadFactory != null)
      {
        return theScadFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ScadFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScadFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ScadPackage.MODEL: return createModel();
      case ScadPackage.MODULE_OR_FUNCTION: return createModuleOrFunction();
      case ScadPackage.USE_OR_INCLUDE: return createUseOrInclude();
      case ScadPackage.MODULE: return createModule();
      case ScadPackage.FUNCTION: return createFunction();
      case ScadPackage.MODULE_OR_FUNCTION_CALL: return createModuleOrFunctionCall();
      case ScadPackage.TRANSFORMATION: return createTransformation();
      case ScadPackage.TRANSLATE: return createTranslate();
      case ScadPackage.ROTATE: return createRotate();
      case ScadPackage.SCALE: return createScale();
      case ScadPackage.SHAPE: return createShape();
      case ScadPackage.TRANSFORMED_SHAPE: return createTransformedShape();
      case ScadPackage.TRANSFORMED_MODULE_OR_FUNCTION_CALL: return createTransformedModuleOrFunctionCall();
      case ScadPackage.SPHERE: return createSphere();
      case ScadPackage.SPHERE_PARAMS: return createSphereParams();
      case ScadPackage.CYLINDER: return createCylinder();
      case ScadPackage.CYLINDER_PARAMS: return createCylinderParams();
      case ScadPackage.CUBE: return createCube();
      case ScadPackage.CUBE_PARAMS: return createCubeParams();
      case ScadPackage.UNION: return createUnion();
      case ScadPackage.INTERSECTION: return createIntersection();
      case ScadPackage.DIFFERENCE: return createDifference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleOrFunction createModuleOrFunction()
  {
    ModuleOrFunctionImpl moduleOrFunction = new ModuleOrFunctionImpl();
    return moduleOrFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UseOrInclude createUseOrInclude()
  {
    UseOrIncludeImpl useOrInclude = new UseOrIncludeImpl();
    return useOrInclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public com.karalisoft.scad.Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleOrFunctionCall createModuleOrFunctionCall()
  {
    ModuleOrFunctionCallImpl moduleOrFunctionCall = new ModuleOrFunctionCallImpl();
    return moduleOrFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transformation createTransformation()
  {
    TransformationImpl transformation = new TransformationImpl();
    return transformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Translate createTranslate()
  {
    TranslateImpl translate = new TranslateImpl();
    return translate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rotate createRotate()
  {
    RotateImpl rotate = new RotateImpl();
    return rotate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scale createScale()
  {
    ScaleImpl scale = new ScaleImpl();
    return scale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shape createShape()
  {
    ShapeImpl shape = new ShapeImpl();
    return shape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransformedShape createTransformedShape()
  {
    TransformedShapeImpl transformedShape = new TransformedShapeImpl();
    return transformedShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransformedModuleOrFunctionCall createTransformedModuleOrFunctionCall()
  {
    TransformedModuleOrFunctionCallImpl transformedModuleOrFunctionCall = new TransformedModuleOrFunctionCallImpl();
    return transformedModuleOrFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sphere createSphere()
  {
    SphereImpl sphere = new SphereImpl();
    return sphere;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SphereParams createSphereParams()
  {
    SphereParamsImpl sphereParams = new SphereParamsImpl();
    return sphereParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cylinder createCylinder()
  {
    CylinderImpl cylinder = new CylinderImpl();
    return cylinder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CylinderParams createCylinderParams()
  {
    CylinderParamsImpl cylinderParams = new CylinderParamsImpl();
    return cylinderParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cube createCube()
  {
    CubeImpl cube = new CubeImpl();
    return cube;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CubeParams createCubeParams()
  {
    CubeParamsImpl cubeParams = new CubeParamsImpl();
    return cubeParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Union createUnion()
  {
    UnionImpl union = new UnionImpl();
    return union;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Intersection createIntersection()
  {
    IntersectionImpl intersection = new IntersectionImpl();
    return intersection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Difference createDifference()
  {
    DifferenceImpl difference = new DifferenceImpl();
    return difference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScadPackage getScadPackage()
  {
    return (ScadPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ScadPackage getPackage()
  {
    return ScadPackage.eINSTANCE;
  }

} //ScadFactoryImpl
