/*
 * generated by Xtext 2.24.0
 */
package com.karalisoft.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ScadGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Model");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBlocksAlternatives_0 = (Alternatives)cBlocksAssignment.eContents().get(0);
		private final RuleCall cBlocksShapeParserRuleCall_0_0 = (RuleCall)cBlocksAlternatives_0.eContents().get(0);
		private final RuleCall cBlocksModuleParserRuleCall_0_1 = (RuleCall)cBlocksAlternatives_0.eContents().get(1);
		private final RuleCall cBlocksFunctionParserRuleCall_0_2 = (RuleCall)cBlocksAlternatives_0.eContents().get(2);
		private final RuleCall cBlocksModuleOrFunctionCallParserRuleCall_0_3 = (RuleCall)cBlocksAlternatives_0.eContents().get(3);
		private final RuleCall cBlocksUseOrIncludeParserRuleCall_0_4 = (RuleCall)cBlocksAlternatives_0.eContents().get(4);
		
		////https://blogs.itemis.com/en/debugging-xtext-grammars-what-to-do-when-your-language-is-ambiguous
		////https://www.euclideanspace.com/software/development/eclipse/xtext/grammar/syntacticPredicates/index.htm
		//Model:
		//	blocks+=(Shape | Module | Function | ModuleOrFunctionCall | UseOrInclude)*;
		@Override public ParserRule getRule() { return rule; }
		
		//blocks+=(Shape | Module | Function | ModuleOrFunctionCall | UseOrInclude)*
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }
		
		//(Shape | Module | Function | ModuleOrFunctionCall | UseOrInclude)
		public Alternatives getBlocksAlternatives_0() { return cBlocksAlternatives_0; }
		
		//Shape
		public RuleCall getBlocksShapeParserRuleCall_0_0() { return cBlocksShapeParserRuleCall_0_0; }
		
		//Module
		public RuleCall getBlocksModuleParserRuleCall_0_1() { return cBlocksModuleParserRuleCall_0_1; }
		
		//Function
		public RuleCall getBlocksFunctionParserRuleCall_0_2() { return cBlocksFunctionParserRuleCall_0_2; }
		
		//ModuleOrFunctionCall
		public RuleCall getBlocksModuleOrFunctionCallParserRuleCall_0_3() { return cBlocksModuleOrFunctionCallParserRuleCall_0_3; }
		
		//UseOrInclude
		public RuleCall getBlocksUseOrIncludeParserRuleCall_0_4() { return cBlocksUseOrIncludeParserRuleCall_0_4; }
	}
	public class ModuleOrFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.ModuleOrFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModuleOrFunction:
		//	Module | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//Module | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Module
		public RuleCall getModuleParserRuleCall_0() { return cModuleParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class UseOrIncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.UseOrInclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUseOrIncludeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cIncludeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//UseOrInclude:
		//	{UseOrInclude} ('use' | 'include') '<' ID '.' ID '>' => ';'*;
		@Override public ParserRule getRule() { return rule; }
		
		//{UseOrInclude} ('use' | 'include') '<' ID '.' ID '>' => ';'*
		public Group getGroup() { return cGroup; }
		
		//{UseOrInclude}
		public Action getUseOrIncludeAction_0() { return cUseOrIncludeAction_0; }
		
		//('use' | 'include')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'use'
		public Keyword getUseKeyword_1_0() { return cUseKeyword_1_0; }
		
		//'include'
		public Keyword getIncludeKeyword_1_1() { return cIncludeKeyword_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_5() { return cIDTerminalRuleCall_5; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBlocksAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cBlocksAlternatives_5_1_0 = (Alternatives)cBlocksAssignment_5_1.eContents().get(0);
		private final RuleCall cBlocksModuleParserRuleCall_5_1_0_0 = (RuleCall)cBlocksAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cBlocksShapeParserRuleCall_5_1_0_1 = (RuleCall)cBlocksAlternatives_5_1_0.eContents().get(1);
		private final RuleCall cBlocksFunctionParserRuleCall_5_1_0_2 = (RuleCall)cBlocksAlternatives_5_1_0.eContents().get(2);
		private final RuleCall cBlocksModuleOrFunctionCallParserRuleCall_5_1_0_3 = (RuleCall)cBlocksAlternatives_5_1_0.eContents().get(3);
		private final RuleCall cBlocksTransformedModuleOrFunctionCallParserRuleCall_5_1_0_4 = (RuleCall)cBlocksAlternatives_5_1_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Module:
		//	{Module} 'module' name=ID '(' ')' ('{' blocks+=(Module | Shape | Function | ModuleOrFunctionCall |
		//	TransformedModuleOrFunctionCall)* '}') => ';'*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Module} 'module' name=ID '(' ')' ('{' blocks+=(Module | Shape | Function | ModuleOrFunctionCall |
		//TransformedModuleOrFunctionCall)* '}') => ';'*
		public Group getGroup() { return cGroup; }
		
		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }
		
		//'module'
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('{' blocks+=(Module | Shape | Function | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}')
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//blocks+=(Module | Shape | Function | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		public Assignment getBlocksAssignment_5_1() { return cBlocksAssignment_5_1; }
		
		//(Module | Shape | Function | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)
		public Alternatives getBlocksAlternatives_5_1_0() { return cBlocksAlternatives_5_1_0; }
		
		//Module
		public RuleCall getBlocksModuleParserRuleCall_5_1_0_0() { return cBlocksModuleParserRuleCall_5_1_0_0; }
		
		//Shape
		public RuleCall getBlocksShapeParserRuleCall_5_1_0_1() { return cBlocksShapeParserRuleCall_5_1_0_1; }
		
		//Function
		public RuleCall getBlocksFunctionParserRuleCall_5_1_0_2() { return cBlocksFunctionParserRuleCall_5_1_0_2; }
		
		//ModuleOrFunctionCall
		public RuleCall getBlocksModuleOrFunctionCallParserRuleCall_5_1_0_3() { return cBlocksModuleOrFunctionCallParserRuleCall_5_1_0_3; }
		
		//TransformedModuleOrFunctionCall
		public RuleCall getBlocksTransformedModuleOrFunctionCallParserRuleCall_5_1_0_4() { return cBlocksTransformedModuleOrFunctionCallParserRuleCall_5_1_0_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function:
		//	{Function} 'function' name=ID '(' ')' => ';'*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} 'function' name=ID '(' ')' => ';'*
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ModuleOrFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.ModuleOrFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ModuleOrFunctionCall:
		////	name=[ModuleOrFunction] '(' ')' ';';
		//ModuleOrFunctionCall:
		//	name=ID '(' ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' ')' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Transformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTranslateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScaleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRotateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Transformation:
		//	Translate | Scale | Rotate;
		@Override public ParserRule getRule() { return rule; }
		
		//Translate | Scale | Rotate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Translate
		public RuleCall getTranslateParserRuleCall_0() { return cTranslateParserRuleCall_0; }
		
		//Scale
		public RuleCall getScaleParserRuleCall_1() { return cScaleParserRuleCall_1; }
		
		//Rotate
		public RuleCall getRotateParserRuleCall_2() { return cRotateParserRuleCall_2; }
	}
	public class TranslateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Translate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTranslateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTranslateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cXAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cXDoubleParserRuleCall_1_3_0 = (RuleCall)cXAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cYAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cYDoubleParserRuleCall_1_5_0 = (RuleCall)cYAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cZAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cZDoubleParserRuleCall_1_7_0 = (RuleCall)cZAssignment_1_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		
		//Translate:
		//	{Translate} ('translate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{Translate} ('translate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')')
		public Group getGroup() { return cGroup; }
		
		//{Translate}
		public Action getTranslateAction_0() { return cTranslateAction_0; }
		
		//('translate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'translate'
		public Keyword getTranslateKeyword_1_0() { return cTranslateKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//x=Double
		public Assignment getXAssignment_1_3() { return cXAssignment_1_3; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_1_3_0() { return cXDoubleParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//y=Double
		public Assignment getYAssignment_1_5() { return cYAssignment_1_5; }
		
		//Double
		public RuleCall getYDoubleParserRuleCall_1_5_0() { return cYDoubleParserRuleCall_1_5_0; }
		
		//','
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }
		
		//z=Double
		public Assignment getZAssignment_1_7() { return cZAssignment_1_7; }
		
		//Double
		public RuleCall getZDoubleParserRuleCall_1_7_0() { return cZDoubleParserRuleCall_1_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_8() { return cRightSquareBracketKeyword_1_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_9() { return cRightParenthesisKeyword_1_9; }
	}
	public class RotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Rotate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRotateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cXAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cXDoubleParserRuleCall_1_3_0 = (RuleCall)cXAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cYAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cYDoubleParserRuleCall_1_5_0 = (RuleCall)cYAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cZAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cZDoubleParserRuleCall_1_7_0 = (RuleCall)cZAssignment_1_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		
		//Rotate:
		//	{Rotate} ('rotate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{Rotate} ('rotate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')')
		public Group getGroup() { return cGroup; }
		
		//{Rotate}
		public Action getRotateAction_0() { return cRotateAction_0; }
		
		//('rotate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'rotate'
		public Keyword getRotateKeyword_1_0() { return cRotateKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//x=Double
		public Assignment getXAssignment_1_3() { return cXAssignment_1_3; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_1_3_0() { return cXDoubleParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//y=Double
		public Assignment getYAssignment_1_5() { return cYAssignment_1_5; }
		
		//Double
		public RuleCall getYDoubleParserRuleCall_1_5_0() { return cYDoubleParserRuleCall_1_5_0; }
		
		//','
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }
		
		//z=Double
		public Assignment getZAssignment_1_7() { return cZAssignment_1_7; }
		
		//Double
		public RuleCall getZDoubleParserRuleCall_1_7_0() { return cZDoubleParserRuleCall_1_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_8() { return cRightSquareBracketKeyword_1_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_9() { return cRightParenthesisKeyword_1_9; }
	}
	public class ScaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Scale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScaleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cScaleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cXAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cXDoubleParserRuleCall_1_2_0_1_0 = (RuleCall)cXAssignment_1_2_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_0_2 = (Keyword)cGroup_1_2_0.eContents().get(2);
		private final Assignment cYAssignment_1_2_0_3 = (Assignment)cGroup_1_2_0.eContents().get(3);
		private final RuleCall cYDoubleParserRuleCall_1_2_0_3_0 = (RuleCall)cYAssignment_1_2_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_0_4 = (Keyword)cGroup_1_2_0.eContents().get(4);
		private final Assignment cZAssignment_1_2_0_5 = (Assignment)cGroup_1_2_0.eContents().get(5);
		private final RuleCall cZDoubleParserRuleCall_1_2_0_5_0 = (RuleCall)cZAssignment_1_2_0_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_0_6 = (Keyword)cGroup_1_2_0.eContents().get(6);
		private final Assignment cScaleAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cScaleDoubleParserRuleCall_1_2_1_0 = (RuleCall)cScaleAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Scale:
		//	{Scale} ('scale' '(' ('[' x=Double ',' y=Double ',' z=Double ']' | scale=Double) ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{Scale} ('scale' '(' ('[' x=Double ',' y=Double ',' z=Double ']' | scale=Double) ')')
		public Group getGroup() { return cGroup; }
		
		//{Scale}
		public Action getScaleAction_0() { return cScaleAction_0; }
		
		//('scale' '(' ('[' x=Double ',' y=Double ',' z=Double ']' | scale=Double) ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'scale'
		public Keyword getScaleKeyword_1_0() { return cScaleKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//('[' x=Double ',' y=Double ',' z=Double ']' | scale=Double)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'[' x=Double ',' y=Double ',' z=Double ']'
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0_0() { return cLeftSquareBracketKeyword_1_2_0_0; }
		
		//x=Double
		public Assignment getXAssignment_1_2_0_1() { return cXAssignment_1_2_0_1; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_1_2_0_1_0() { return cXDoubleParserRuleCall_1_2_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2_0_2() { return cCommaKeyword_1_2_0_2; }
		
		//y=Double
		public Assignment getYAssignment_1_2_0_3() { return cYAssignment_1_2_0_3; }
		
		//Double
		public RuleCall getYDoubleParserRuleCall_1_2_0_3_0() { return cYDoubleParserRuleCall_1_2_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_2_0_4() { return cCommaKeyword_1_2_0_4; }
		
		//z=Double
		public Assignment getZAssignment_1_2_0_5() { return cZAssignment_1_2_0_5; }
		
		//Double
		public RuleCall getZDoubleParserRuleCall_1_2_0_5_0() { return cZDoubleParserRuleCall_1_2_0_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_0_6() { return cRightSquareBracketKeyword_1_2_0_6; }
		
		//scale=Double
		public Assignment getScaleAssignment_1_2_1() { return cScaleAssignment_1_2_1; }
		
		//Double
		public RuleCall getScaleDoubleParserRuleCall_1_2_1_0() { return cScaleDoubleParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class ShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Shape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImplAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cImplAlternatives_1_0 = (Alternatives)cImplAssignment_1.eContents().get(0);
		private final RuleCall cImplTransformedShapeParserRuleCall_1_0_0 = (RuleCall)cImplAlternatives_1_0.eContents().get(0);
		private final RuleCall cImplUnionParserRuleCall_1_0_1 = (RuleCall)cImplAlternatives_1_0.eContents().get(1);
		private final RuleCall cImplIntersectionParserRuleCall_1_0_2 = (RuleCall)cImplAlternatives_1_0.eContents().get(2);
		private final RuleCall cImplDifferenceParserRuleCall_1_0_3 = (RuleCall)cImplAlternatives_1_0.eContents().get(3);
		private final RuleCall cImplSphereParserRuleCall_1_0_4 = (RuleCall)cImplAlternatives_1_0.eContents().get(4);
		private final RuleCall cImplCylinderParserRuleCall_1_0_5 = (RuleCall)cImplAlternatives_1_0.eContents().get(5);
		private final RuleCall cImplCubeParserRuleCall_1_0_6 = (RuleCall)cImplAlternatives_1_0.eContents().get(6);
		
		//Shape:
		//	{Shape} impl=(TransformedShape | Union | Intersection | Difference | Sphere | Cylinder | Cube);
		@Override public ParserRule getRule() { return rule; }
		
		//{Shape} impl=(TransformedShape | Union | Intersection | Difference | Sphere | Cylinder | Cube)
		public Group getGroup() { return cGroup; }
		
		//{Shape}
		public Action getShapeAction_0() { return cShapeAction_0; }
		
		//impl=(TransformedShape | Union | Intersection | Difference | Sphere | Cylinder | Cube)
		public Assignment getImplAssignment_1() { return cImplAssignment_1; }
		
		//(TransformedShape | Union | Intersection | Difference | Sphere | Cylinder | Cube)
		public Alternatives getImplAlternatives_1_0() { return cImplAlternatives_1_0; }
		
		//TransformedShape
		public RuleCall getImplTransformedShapeParserRuleCall_1_0_0() { return cImplTransformedShapeParserRuleCall_1_0_0; }
		
		//Union
		public RuleCall getImplUnionParserRuleCall_1_0_1() { return cImplUnionParserRuleCall_1_0_1; }
		
		//Intersection
		public RuleCall getImplIntersectionParserRuleCall_1_0_2() { return cImplIntersectionParserRuleCall_1_0_2; }
		
		//Difference
		public RuleCall getImplDifferenceParserRuleCall_1_0_3() { return cImplDifferenceParserRuleCall_1_0_3; }
		
		//Sphere
		public RuleCall getImplSphereParserRuleCall_1_0_4() { return cImplSphereParserRuleCall_1_0_4; }
		
		//Cylinder
		public RuleCall getImplCylinderParserRuleCall_1_0_5() { return cImplCylinderParserRuleCall_1_0_5; }
		
		//Cube
		public RuleCall getImplCubeParserRuleCall_1_0_6() { return cImplCubeParserRuleCall_1_0_6; }
	}
	public class TransformedShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.TransformedShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformedShapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTranslationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTranslationsAlternatives_1_0 = (Alternatives)cTranslationsAssignment_1.eContents().get(0);
		private final RuleCall cTranslationsTranslateParserRuleCall_1_0_0 = (RuleCall)cTranslationsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTranslationsRotateParserRuleCall_1_0_1 = (RuleCall)cTranslationsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTranslationsScaleParserRuleCall_1_0_2 = (RuleCall)cTranslationsAlternatives_1_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImplAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImplShapeParserRuleCall_3_0 = (RuleCall)cImplAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TransformedShape:
		//	{TransformedShape} translations+=(Translate | Rotate | Scale)+ '{'
		//	impl+=Shape+
		//	'}' => ';'*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TransformedShape} translations+=(Translate | Rotate | Scale)+ '{'
		//impl+=Shape+
		//'}' => ';'*
		public Group getGroup() { return cGroup; }
		
		//{TransformedShape}
		public Action getTransformedShapeAction_0() { return cTransformedShapeAction_0; }
		
		//translations+=(Translate | Rotate | Scale)+
		public Assignment getTranslationsAssignment_1() { return cTranslationsAssignment_1; }
		
		//(Translate | Rotate | Scale)
		public Alternatives getTranslationsAlternatives_1_0() { return cTranslationsAlternatives_1_0; }
		
		//Translate
		public RuleCall getTranslationsTranslateParserRuleCall_1_0_0() { return cTranslationsTranslateParserRuleCall_1_0_0; }
		
		//Rotate
		public RuleCall getTranslationsRotateParserRuleCall_1_0_1() { return cTranslationsRotateParserRuleCall_1_0_1; }
		
		//Scale
		public RuleCall getTranslationsScaleParserRuleCall_1_0_2() { return cTranslationsScaleParserRuleCall_1_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//impl+=Shape+
		public Assignment getImplAssignment_3() { return cImplAssignment_3; }
		
		//Shape
		public RuleCall getImplShapeParserRuleCall_3_0() { return cImplShapeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class TransformedModuleOrFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.TransformedModuleOrFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformedModuleOrFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTranslationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTranslationsAlternatives_1_0 = (Alternatives)cTranslationsAssignment_1.eContents().get(0);
		private final RuleCall cTranslationsTranslateParserRuleCall_1_0_0 = (RuleCall)cTranslationsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTranslationsRotateParserRuleCall_1_0_1 = (RuleCall)cTranslationsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTranslationsScaleParserRuleCall_1_0_2 = (RuleCall)cTranslationsAlternatives_1_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImplAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImplModuleOrFunctionCallParserRuleCall_3_0 = (RuleCall)cImplAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TransformedModuleOrFunctionCall:
		//	{TransformedModuleOrFunctionCall} translations+=(Translate | Rotate | Scale)+ '{'
		//	impl+=ModuleOrFunctionCall+
		//	'}' => ';'*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TransformedModuleOrFunctionCall} translations+=(Translate | Rotate | Scale)+ '{'
		//impl+=ModuleOrFunctionCall+
		//'}' => ';'*
		public Group getGroup() { return cGroup; }
		
		//{TransformedModuleOrFunctionCall}
		public Action getTransformedModuleOrFunctionCallAction_0() { return cTransformedModuleOrFunctionCallAction_0; }
		
		//translations+=(Translate | Rotate | Scale)+
		public Assignment getTranslationsAssignment_1() { return cTranslationsAssignment_1; }
		
		//(Translate | Rotate | Scale)
		public Alternatives getTranslationsAlternatives_1_0() { return cTranslationsAlternatives_1_0; }
		
		//Translate
		public RuleCall getTranslationsTranslateParserRuleCall_1_0_0() { return cTranslationsTranslateParserRuleCall_1_0_0; }
		
		//Rotate
		public RuleCall getTranslationsRotateParserRuleCall_1_0_1() { return cTranslationsRotateParserRuleCall_1_0_1; }
		
		//Scale
		public RuleCall getTranslationsScaleParserRuleCall_1_0_2() { return cTranslationsScaleParserRuleCall_1_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//impl+=ModuleOrFunctionCall+
		public Assignment getImplAssignment_3() { return cImplAssignment_3; }
		
		//ModuleOrFunctionCall
		public RuleCall getImplModuleOrFunctionCallParserRuleCall_3_0() { return cImplModuleOrFunctionCallParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSphereAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSphereKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cSphereParamsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cSphereParamsSphereParamsParserRuleCall_1_2_0_0 = (RuleCall)cSphereParamsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cSphereParamsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cSphereParamsSphereParamsParserRuleCall_1_2_1_1_0 = (RuleCall)cSphereParamsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Sphere:
		//	{Sphere} ('sphere' '(' (sphereParams+=SphereParams (',' sphereParams+=SphereParams)*)?
		//	')' => ';'+);
		@Override public ParserRule getRule() { return rule; }
		
		//{Sphere} ('sphere' '(' (sphereParams+=SphereParams (',' sphereParams+=SphereParams)*)?
		//')' => ';'+)
		public Group getGroup() { return cGroup; }
		
		//{Sphere}
		public Action getSphereAction_0() { return cSphereAction_0; }
		
		//('sphere' '(' (sphereParams+=SphereParams (',' sphereParams+=SphereParams)*)?
		//')' => ';'+)
		public Group getGroup_1() { return cGroup_1; }
		
		//'sphere'
		public Keyword getSphereKeyword_1_0() { return cSphereKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(sphereParams+=SphereParams (',' sphereParams+=SphereParams)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//sphereParams+=SphereParams
		public Assignment getSphereParamsAssignment_1_2_0() { return cSphereParamsAssignment_1_2_0; }
		
		//SphereParams
		public RuleCall getSphereParamsSphereParamsParserRuleCall_1_2_0_0() { return cSphereParamsSphereParamsParserRuleCall_1_2_0_0; }
		
		//(',' sphereParams+=SphereParams)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }
		
		//sphereParams+=SphereParams
		public Assignment getSphereParamsAssignment_1_2_1_1() { return cSphereParamsAssignment_1_2_1_1; }
		
		//SphereParams
		public RuleCall getSphereParamsSphereParamsParserRuleCall_1_2_1_1_0() { return cSphereParamsSphereParamsParserRuleCall_1_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//=> ';'+
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}
	public class SphereParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.SphereParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSphereParamsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFnKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFnAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFnDoubleParserRuleCall_1_0_2_0 = (RuleCall)cFnAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFaAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFaDoubleParserRuleCall_1_1_2_0 = (RuleCall)cFaAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cFsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cFsDoubleParserRuleCall_1_2_2_0 = (RuleCall)cFsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cRKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRDoubleParserRuleCall_1_3_2_0 = (RuleCall)cRAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cDKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cDAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cDDoubleParserRuleCall_1_4_2_0 = (RuleCall)cDAssignment_1_4_2.eContents().get(0);
		
		//SphereParams:
		//	{SphereParams} ('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'r' '=' r=Double | 'd' '=' d=Double
		//	);
		@Override public ParserRule getRule() { return rule; }
		
		//{SphereParams} ('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'r' '=' r=Double | 'd' '=' d=Double)
		public Group getGroup() { return cGroup; }
		
		//{SphereParams}
		public Action getSphereParamsAction_0() { return cSphereParamsAction_0; }
		
		//('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'r' '=' r=Double | 'd' '=' d=Double)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'$fn' '=' fn=Double
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'$fn'
		public Keyword getFnKeyword_1_0_0() { return cFnKeyword_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//fn=Double
		public Assignment getFnAssignment_1_0_2() { return cFnAssignment_1_0_2; }
		
		//Double
		public RuleCall getFnDoubleParserRuleCall_1_0_2_0() { return cFnDoubleParserRuleCall_1_0_2_0; }
		
		//'$fa' '=' fa=Double
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'$fa'
		public Keyword getFaKeyword_1_1_0() { return cFaKeyword_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }
		
		//fa=Double
		public Assignment getFaAssignment_1_1_2() { return cFaAssignment_1_1_2; }
		
		//Double
		public RuleCall getFaDoubleParserRuleCall_1_1_2_0() { return cFaDoubleParserRuleCall_1_1_2_0; }
		
		//'$fs' '=' fs=Double
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'$fs'
		public Keyword getFsKeyword_1_2_0() { return cFsKeyword_1_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_1() { return cEqualsSignKeyword_1_2_1; }
		
		//fs=Double
		public Assignment getFsAssignment_1_2_2() { return cFsAssignment_1_2_2; }
		
		//Double
		public RuleCall getFsDoubleParserRuleCall_1_2_2_0() { return cFsDoubleParserRuleCall_1_2_2_0; }
		
		//'r' '=' r=Double
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'r'
		public Keyword getRKeyword_1_3_0() { return cRKeyword_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_3_1() { return cEqualsSignKeyword_1_3_1; }
		
		//r=Double
		public Assignment getRAssignment_1_3_2() { return cRAssignment_1_3_2; }
		
		//Double
		public RuleCall getRDoubleParserRuleCall_1_3_2_0() { return cRDoubleParserRuleCall_1_3_2_0; }
		
		//'d' '=' d=Double
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'d'
		public Keyword getDKeyword_1_4_0() { return cDKeyword_1_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_4_1() { return cEqualsSignKeyword_1_4_1; }
		
		//d=Double
		public Assignment getDAssignment_1_4_2() { return cDAssignment_1_4_2; }
		
		//Double
		public RuleCall getDDoubleParserRuleCall_1_4_2_0() { return cDDoubleParserRuleCall_1_4_2_0; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCylinderAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCylinderKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cCylinderParamsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cCylinderParamsCylinderParamsParserRuleCall_1_2_0_0 = (RuleCall)cCylinderParamsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cCylinderParamsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cCylinderParamsCylinderParamsParserRuleCall_1_2_1_1_0 = (RuleCall)cCylinderParamsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Cylinder:
		//	{Cylinder} ('cylinder' '(' (cylinderParams+=CylinderParams (',' cylinderParams+=CylinderParams)*)?
		//	')' => ';'+);
		@Override public ParserRule getRule() { return rule; }
		
		//{Cylinder} ('cylinder' '(' (cylinderParams+=CylinderParams (',' cylinderParams+=CylinderParams)*)?
		//')' => ';'+)
		public Group getGroup() { return cGroup; }
		
		//{Cylinder}
		public Action getCylinderAction_0() { return cCylinderAction_0; }
		
		//('cylinder' '(' (cylinderParams+=CylinderParams (',' cylinderParams+=CylinderParams)*)?
		//')' => ';'+)
		public Group getGroup_1() { return cGroup_1; }
		
		//'cylinder'
		public Keyword getCylinderKeyword_1_0() { return cCylinderKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(cylinderParams+=CylinderParams (',' cylinderParams+=CylinderParams)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//cylinderParams+=CylinderParams
		public Assignment getCylinderParamsAssignment_1_2_0() { return cCylinderParamsAssignment_1_2_0; }
		
		//CylinderParams
		public RuleCall getCylinderParamsCylinderParamsParserRuleCall_1_2_0_0() { return cCylinderParamsCylinderParamsParserRuleCall_1_2_0_0; }
		
		//(',' cylinderParams+=CylinderParams)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }
		
		//cylinderParams+=CylinderParams
		public Assignment getCylinderParamsAssignment_1_2_1_1() { return cCylinderParamsAssignment_1_2_1_1; }
		
		//CylinderParams
		public RuleCall getCylinderParamsCylinderParamsParserRuleCall_1_2_1_1_0() { return cCylinderParamsCylinderParamsParserRuleCall_1_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//=> ';'+
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}
	public class CylinderParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.CylinderParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCylinderParamsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFnKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFnAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFnDoubleParserRuleCall_1_0_2_0 = (RuleCall)cFnAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFaAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFaDoubleParserRuleCall_1_1_2_0 = (RuleCall)cFaAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cFsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cFsDoubleParserRuleCall_1_2_2_0 = (RuleCall)cFsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cHKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cHAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cHDoubleParserRuleCall_1_3_2_0 = (RuleCall)cHAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cRKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cRAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRDoubleParserRuleCall_1_4_2_0 = (RuleCall)cRAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cR1Keyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cR1Assignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cR1DoubleParserRuleCall_1_5_2_0 = (RuleCall)cR1Assignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Keyword cR2Keyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cR2Assignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cR2DoubleParserRuleCall_1_6_2_0 = (RuleCall)cR2Assignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Keyword cDKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Assignment cDAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cDDoubleParserRuleCall_1_7_2_0 = (RuleCall)cDAssignment_1_7_2.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Keyword cD1Keyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cD1Assignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cD1DoubleParserRuleCall_1_8_2_0 = (RuleCall)cD1Assignment_1_8_2.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final Keyword cD2Keyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_9_1 = (Keyword)cGroup_1_9.eContents().get(1);
		private final Assignment cD2Assignment_1_9_2 = (Assignment)cGroup_1_9.eContents().get(2);
		private final RuleCall cD2DoubleParserRuleCall_1_9_2_0 = (RuleCall)cD2Assignment_1_9_2.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cAlternatives_1.eContents().get(10);
		private final Group cGroup_1_10_0 = (Group)cGroup_1_10.eContents().get(0);
		private final Keyword cCenterKeyword_1_10_0_0 = (Keyword)cGroup_1_10_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_10_0_1 = (Keyword)cGroup_1_10_0.eContents().get(1);
		private final Assignment cCenterAssignment_1_10_1 = (Assignment)cGroup_1_10.eContents().get(1);
		private final Alternatives cCenterAlternatives_1_10_1_0 = (Alternatives)cCenterAssignment_1_10_1.eContents().get(0);
		private final Keyword cCenterTrueKeyword_1_10_1_0_0 = (Keyword)cCenterAlternatives_1_10_1_0.eContents().get(0);
		private final Keyword cCenterFalseKeyword_1_10_1_0_1 = (Keyword)cCenterAlternatives_1_10_1_0.eContents().get(1);
		
		//CylinderParams:
		//	{CylinderParams} ('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'h' '=' h=Double | 'r' '='
		//	r=Double | 'r1' '=' r1=Double | 'r2' '=' r2=Double | 'd' '=' d=Double | 'd1' '=' d1=Double | 'd2' '=' d2=Double | (
		//	'center' '=')? center=('true' | 'false'));
		@Override public ParserRule getRule() { return rule; }
		
		//{CylinderParams} ('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'h' '=' h=Double | 'r' '=' r=Double |
		//'r1' '=' r1=Double | 'r2' '=' r2=Double | 'd' '=' d=Double | 'd1' '=' d1=Double | 'd2' '=' d2=Double | ('center' '=')?
		//center=('true' | 'false'))
		public Group getGroup() { return cGroup; }
		
		//{CylinderParams}
		public Action getCylinderParamsAction_0() { return cCylinderParamsAction_0; }
		
		//('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'h' '=' h=Double | 'r' '=' r=Double | 'r1' '='
		//r1=Double | 'r2' '=' r2=Double | 'd' '=' d=Double | 'd1' '=' d1=Double | 'd2' '=' d2=Double | ('center' '=')? center=(
		//'true' | 'false'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'$fn' '=' fn=Double
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'$fn'
		public Keyword getFnKeyword_1_0_0() { return cFnKeyword_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//fn=Double
		public Assignment getFnAssignment_1_0_2() { return cFnAssignment_1_0_2; }
		
		//Double
		public RuleCall getFnDoubleParserRuleCall_1_0_2_0() { return cFnDoubleParserRuleCall_1_0_2_0; }
		
		//'$fa' '=' fa=Double
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'$fa'
		public Keyword getFaKeyword_1_1_0() { return cFaKeyword_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }
		
		//fa=Double
		public Assignment getFaAssignment_1_1_2() { return cFaAssignment_1_1_2; }
		
		//Double
		public RuleCall getFaDoubleParserRuleCall_1_1_2_0() { return cFaDoubleParserRuleCall_1_1_2_0; }
		
		//'$fs' '=' fs=Double
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'$fs'
		public Keyword getFsKeyword_1_2_0() { return cFsKeyword_1_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_1() { return cEqualsSignKeyword_1_2_1; }
		
		//fs=Double
		public Assignment getFsAssignment_1_2_2() { return cFsAssignment_1_2_2; }
		
		//Double
		public RuleCall getFsDoubleParserRuleCall_1_2_2_0() { return cFsDoubleParserRuleCall_1_2_2_0; }
		
		//'h' '=' h=Double
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'h'
		public Keyword getHKeyword_1_3_0() { return cHKeyword_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_3_1() { return cEqualsSignKeyword_1_3_1; }
		
		//h=Double
		public Assignment getHAssignment_1_3_2() { return cHAssignment_1_3_2; }
		
		//Double
		public RuleCall getHDoubleParserRuleCall_1_3_2_0() { return cHDoubleParserRuleCall_1_3_2_0; }
		
		//'r' '=' r=Double
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'r'
		public Keyword getRKeyword_1_4_0() { return cRKeyword_1_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_4_1() { return cEqualsSignKeyword_1_4_1; }
		
		//r=Double
		public Assignment getRAssignment_1_4_2() { return cRAssignment_1_4_2; }
		
		//Double
		public RuleCall getRDoubleParserRuleCall_1_4_2_0() { return cRDoubleParserRuleCall_1_4_2_0; }
		
		//'r1' '=' r1=Double
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'r1'
		public Keyword getR1Keyword_1_5_0() { return cR1Keyword_1_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_5_1() { return cEqualsSignKeyword_1_5_1; }
		
		//r1=Double
		public Assignment getR1Assignment_1_5_2() { return cR1Assignment_1_5_2; }
		
		//Double
		public RuleCall getR1DoubleParserRuleCall_1_5_2_0() { return cR1DoubleParserRuleCall_1_5_2_0; }
		
		//'r2' '=' r2=Double
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'r2'
		public Keyword getR2Keyword_1_6_0() { return cR2Keyword_1_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_6_1() { return cEqualsSignKeyword_1_6_1; }
		
		//r2=Double
		public Assignment getR2Assignment_1_6_2() { return cR2Assignment_1_6_2; }
		
		//Double
		public RuleCall getR2DoubleParserRuleCall_1_6_2_0() { return cR2DoubleParserRuleCall_1_6_2_0; }
		
		//'d' '=' d=Double
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//'d'
		public Keyword getDKeyword_1_7_0() { return cDKeyword_1_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_7_1() { return cEqualsSignKeyword_1_7_1; }
		
		//d=Double
		public Assignment getDAssignment_1_7_2() { return cDAssignment_1_7_2; }
		
		//Double
		public RuleCall getDDoubleParserRuleCall_1_7_2_0() { return cDDoubleParserRuleCall_1_7_2_0; }
		
		//'d1' '=' d1=Double
		public Group getGroup_1_8() { return cGroup_1_8; }
		
		//'d1'
		public Keyword getD1Keyword_1_8_0() { return cD1Keyword_1_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_8_1() { return cEqualsSignKeyword_1_8_1; }
		
		//d1=Double
		public Assignment getD1Assignment_1_8_2() { return cD1Assignment_1_8_2; }
		
		//Double
		public RuleCall getD1DoubleParserRuleCall_1_8_2_0() { return cD1DoubleParserRuleCall_1_8_2_0; }
		
		//'d2' '=' d2=Double
		public Group getGroup_1_9() { return cGroup_1_9; }
		
		//'d2'
		public Keyword getD2Keyword_1_9_0() { return cD2Keyword_1_9_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_9_1() { return cEqualsSignKeyword_1_9_1; }
		
		//d2=Double
		public Assignment getD2Assignment_1_9_2() { return cD2Assignment_1_9_2; }
		
		//Double
		public RuleCall getD2DoubleParserRuleCall_1_9_2_0() { return cD2DoubleParserRuleCall_1_9_2_0; }
		
		//('center' '=')? center=('true' | 'false')
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//('center' '=')?
		public Group getGroup_1_10_0() { return cGroup_1_10_0; }
		
		//'center'
		public Keyword getCenterKeyword_1_10_0_0() { return cCenterKeyword_1_10_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_10_0_1() { return cEqualsSignKeyword_1_10_0_1; }
		
		//center=('true' | 'false')
		public Assignment getCenterAssignment_1_10_1() { return cCenterAssignment_1_10_1; }
		
		//('true' | 'false')
		public Alternatives getCenterAlternatives_1_10_1_0() { return cCenterAlternatives_1_10_1_0; }
		
		//'true'
		public Keyword getCenterTrueKeyword_1_10_1_0_0() { return cCenterTrueKeyword_1_10_1_0_0; }
		
		//'false'
		public Keyword getCenterFalseKeyword_1_10_1_0_1() { return cCenterFalseKeyword_1_10_1_0_1; }
	}
	public class CubeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Cube");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCubeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCubeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cCubeParamsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cCubeParamsCubeParamsParserRuleCall_1_2_0_0 = (RuleCall)cCubeParamsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cCubeParamsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cCubeParamsCubeParamsParserRuleCall_1_2_1_1_0 = (RuleCall)cCubeParamsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Cube:
		//	{Cube} ('cube' '(' (cubeParams+=CubeParams (',' cubeParams+=CubeParams)*)?
		//	')' => ';'+);
		@Override public ParserRule getRule() { return rule; }
		
		//{Cube} ('cube' '(' (cubeParams+=CubeParams (',' cubeParams+=CubeParams)*)?
		//')' => ';'+)
		public Group getGroup() { return cGroup; }
		
		//{Cube}
		public Action getCubeAction_0() { return cCubeAction_0; }
		
		//('cube' '(' (cubeParams+=CubeParams (',' cubeParams+=CubeParams)*)?
		//')' => ';'+)
		public Group getGroup_1() { return cGroup_1; }
		
		//'cube'
		public Keyword getCubeKeyword_1_0() { return cCubeKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(cubeParams+=CubeParams (',' cubeParams+=CubeParams)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//cubeParams+=CubeParams
		public Assignment getCubeParamsAssignment_1_2_0() { return cCubeParamsAssignment_1_2_0; }
		
		//CubeParams
		public RuleCall getCubeParamsCubeParamsParserRuleCall_1_2_0_0() { return cCubeParamsCubeParamsParserRuleCall_1_2_0_0; }
		
		//(',' cubeParams+=CubeParams)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }
		
		//cubeParams+=CubeParams
		public Assignment getCubeParamsAssignment_1_2_1_1() { return cCubeParamsAssignment_1_2_1_1; }
		
		//CubeParams
		public RuleCall getCubeParamsCubeParamsParserRuleCall_1_2_1_1_0() { return cCubeParamsCubeParamsParserRuleCall_1_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//=> ';'+
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}
	public class CubeParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.CubeParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCubeParamsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cSizeKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cSizeAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cSizeDoubleParserRuleCall_1_0_1_0_0 = (RuleCall)cSizeAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cXAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cXDoubleParserRuleCall_1_0_1_1_1_0 = (RuleCall)cXAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1_1_2 = (Keyword)cGroup_1_0_1_1.eContents().get(2);
		private final Assignment cYAssignment_1_0_1_1_3 = (Assignment)cGroup_1_0_1_1.eContents().get(3);
		private final RuleCall cYDoubleParserRuleCall_1_0_1_1_3_0 = (RuleCall)cYAssignment_1_0_1_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1_1_4 = (Keyword)cGroup_1_0_1_1.eContents().get(4);
		private final Assignment cZAssignment_1_0_1_1_5 = (Assignment)cGroup_1_0_1_1.eContents().get(5);
		private final RuleCall cZDoubleParserRuleCall_1_0_1_1_5_0 = (RuleCall)cZAssignment_1_0_1_1_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1_1_6 = (Keyword)cGroup_1_0_1_1.eContents().get(6);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cCenterKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cCenterAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cCenterAlternatives_1_1_1_0 = (Alternatives)cCenterAssignment_1_1_1.eContents().get(0);
		private final Keyword cCenterTrueKeyword_1_1_1_0_0 = (Keyword)cCenterAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cCenterFalseKeyword_1_1_1_0_1 = (Keyword)cCenterAlternatives_1_1_1_0.eContents().get(1);
		
		//CubeParams:
		//	{CubeParams} (('size' '=')? (size=Double | '[' x=Double ',' y=Double ',' z=Double ']') | ('center' '=')? center=(
		//	'true' | 'false'));
		@Override public ParserRule getRule() { return rule; }
		
		//{CubeParams} (('size' '=')? (size=Double | '[' x=Double ',' y=Double ',' z=Double ']') | ('center' '=')? center=('true' |
		//'false'))
		public Group getGroup() { return cGroup; }
		
		//{CubeParams}
		public Action getCubeParamsAction_0() { return cCubeParamsAction_0; }
		
		//(('size' '=')? (size=Double | '[' x=Double ',' y=Double ',' z=Double ']') | ('center' '=')? center=('true' | 'false'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('size' '=')? (size=Double | '[' x=Double ',' y=Double ',' z=Double ']')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('size' '=')?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'size'
		public Keyword getSizeKeyword_1_0_0_0() { return cSizeKeyword_1_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }
		
		//(size=Double | '[' x=Double ',' y=Double ',' z=Double ']')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//size=Double
		public Assignment getSizeAssignment_1_0_1_0() { return cSizeAssignment_1_0_1_0; }
		
		//Double
		public RuleCall getSizeDoubleParserRuleCall_1_0_1_0_0() { return cSizeDoubleParserRuleCall_1_0_1_0_0; }
		
		//'[' x=Double ',' y=Double ',' z=Double ']'
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_1_1_0() { return cLeftSquareBracketKeyword_1_0_1_1_0; }
		
		//x=Double
		public Assignment getXAssignment_1_0_1_1_1() { return cXAssignment_1_0_1_1_1; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_1_0_1_1_1_0() { return cXDoubleParserRuleCall_1_0_1_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_2() { return cCommaKeyword_1_0_1_1_2; }
		
		//y=Double
		public Assignment getYAssignment_1_0_1_1_3() { return cYAssignment_1_0_1_1_3; }
		
		//Double
		public RuleCall getYDoubleParserRuleCall_1_0_1_1_3_0() { return cYDoubleParserRuleCall_1_0_1_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_4() { return cCommaKeyword_1_0_1_1_4; }
		
		//z=Double
		public Assignment getZAssignment_1_0_1_1_5() { return cZAssignment_1_0_1_1_5; }
		
		//Double
		public RuleCall getZDoubleParserRuleCall_1_0_1_1_5_0() { return cZDoubleParserRuleCall_1_0_1_1_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_1_1_6() { return cRightSquareBracketKeyword_1_0_1_1_6; }
		
		//('center' '=')? center=('true' | 'false')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//('center' '=')?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'center'
		public Keyword getCenterKeyword_1_1_0_0() { return cCenterKeyword_1_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0_1() { return cEqualsSignKeyword_1_1_0_1; }
		
		//center=('true' | 'false')
		public Assignment getCenterAssignment_1_1_1() { return cCenterAssignment_1_1_1; }
		
		//('true' | 'false')
		public Alternatives getCenterAlternatives_1_1_1_0() { return cCenterAlternatives_1_1_1_0; }
		
		//'true'
		public Keyword getCenterTrueKeyword_1_1_1_0_0() { return cCenterTrueKeyword_1_1_1_0_0; }
		
		//'false'
		public Keyword getCenterFalseKeyword_1_1_1_0_1() { return cCenterFalseKeyword_1_1_1_0_1; }
	}
	public class UnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Union");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUnionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cShapesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Alternatives cShapesAlternatives_1_4_0 = (Alternatives)cShapesAssignment_1_4.eContents().get(0);
		private final RuleCall cShapesShapeParserRuleCall_1_4_0_0 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(0);
		private final RuleCall cShapesModuleOrFunctionCallParserRuleCall_1_4_0_1 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(1);
		private final RuleCall cShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Union:
		//	{Union} ('union' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}' => ';'*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Union} ('union' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}' => ';'*)
		public Group getGroup() { return cGroup; }
		
		//{Union}
		public Action getUnionAction_0() { return cUnionAction_0; }
		
		//('union' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}' => ';'*)
		public Group getGroup_1() { return cGroup_1; }
		
		//'union'
		public Keyword getUnionKeyword_1_0() { return cUnionKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		public Assignment getShapesAssignment_1_4() { return cShapesAssignment_1_4; }
		
		//(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)
		public Alternatives getShapesAlternatives_1_4_0() { return cShapesAlternatives_1_4_0; }
		
		//Shape
		public RuleCall getShapesShapeParserRuleCall_1_4_0_0() { return cShapesShapeParserRuleCall_1_4_0_0; }
		
		//ModuleOrFunctionCall
		public RuleCall getShapesModuleOrFunctionCallParserRuleCall_1_4_0_1() { return cShapesModuleOrFunctionCallParserRuleCall_1_4_0_1; }
		
		//TransformedModuleOrFunctionCall
		public RuleCall getShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2() { return cShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class IntersectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Intersection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntersectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIntersectionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cShapesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Alternatives cShapesAlternatives_1_4_0 = (Alternatives)cShapesAssignment_1_4.eContents().get(0);
		private final RuleCall cShapesShapeParserRuleCall_1_4_0_0 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(0);
		private final RuleCall cShapesModuleOrFunctionCallParserRuleCall_1_4_0_1 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(1);
		private final RuleCall cShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Intersection:
		//	{Intersection} ('intersection' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		//	'}' => ';'*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Intersection} ('intersection' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		//'}' => ';'*)
		public Group getGroup() { return cGroup; }
		
		//{Intersection}
		public Action getIntersectionAction_0() { return cIntersectionAction_0; }
		
		//('intersection' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		//'}' => ';'*)
		public Group getGroup_1() { return cGroup_1; }
		
		//'intersection'
		public Keyword getIntersectionKeyword_1_0() { return cIntersectionKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		public Assignment getShapesAssignment_1_4() { return cShapesAssignment_1_4; }
		
		//(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)
		public Alternatives getShapesAlternatives_1_4_0() { return cShapesAlternatives_1_4_0; }
		
		//Shape
		public RuleCall getShapesShapeParserRuleCall_1_4_0_0() { return cShapesShapeParserRuleCall_1_4_0_0; }
		
		//ModuleOrFunctionCall
		public RuleCall getShapesModuleOrFunctionCallParserRuleCall_1_4_0_1() { return cShapesModuleOrFunctionCallParserRuleCall_1_4_0_1; }
		
		//TransformedModuleOrFunctionCall
		public RuleCall getShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2() { return cShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DifferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Difference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDifferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDifferenceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cShapesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Alternatives cShapesAlternatives_1_4_0 = (Alternatives)cShapesAssignment_1_4.eContents().get(0);
		private final RuleCall cShapesShapeParserRuleCall_1_4_0_0 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(0);
		private final RuleCall cShapesModuleOrFunctionCallParserRuleCall_1_4_0_1 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(1);
		private final RuleCall cShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2 = (RuleCall)cShapesAlternatives_1_4_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Difference:
		//	{Difference} ('difference' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}'
		//	=> ';'*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Difference} ('difference' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}'
		//=> ';'*)
		public Group getGroup() { return cGroup; }
		
		//{Difference}
		public Action getDifferenceAction_0() { return cDifferenceAction_0; }
		
		//('difference' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}'
		//=> ';'*)
		public Group getGroup_1() { return cGroup_1; }
		
		//'difference'
		public Keyword getDifferenceKeyword_1_0() { return cDifferenceKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
		public Assignment getShapesAssignment_1_4() { return cShapesAssignment_1_4; }
		
		//(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)
		public Alternatives getShapesAlternatives_1_4_0() { return cShapesAlternatives_1_4_0; }
		
		//Shape
		public RuleCall getShapesShapeParserRuleCall_1_4_0_0() { return cShapesShapeParserRuleCall_1_4_0_0; }
		
		//ModuleOrFunctionCall
		public RuleCall getShapesModuleOrFunctionCallParserRuleCall_1_4_0_1() { return cShapesModuleOrFunctionCallParserRuleCall_1_4_0_1; }
		
		//TransformedModuleOrFunctionCall
		public RuleCall getShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2() { return cShapesTransformedModuleOrFunctionCallParserRuleCall_1_4_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//=> ';'*
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.karalisoft.Scad.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Double ecore::EDoubleObject:
		//	('+' | '-')? (INT ('.' INT)?);
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-')? (INT ('.' INT)?)
		public Group getGroup() { return cGroup; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//(INT ('.' INT)?)
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//('.' INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final ModuleOrFunctionElements pModuleOrFunction;
	private final UseOrIncludeElements pUseOrInclude;
	private final ModuleElements pModule;
	private final FunctionElements pFunction;
	private final ModuleOrFunctionCallElements pModuleOrFunctionCall;
	private final TransformationElements pTransformation;
	private final TranslateElements pTranslate;
	private final RotateElements pRotate;
	private final ScaleElements pScale;
	private final ShapeElements pShape;
	private final TransformedShapeElements pTransformedShape;
	private final TransformedModuleOrFunctionCallElements pTransformedModuleOrFunctionCall;
	private final SphereElements pSphere;
	private final SphereParamsElements pSphereParams;
	private final CylinderElements pCylinder;
	private final CylinderParamsElements pCylinderParams;
	private final CubeElements pCube;
	private final CubeParamsElements pCubeParams;
	private final UnionElements pUnion;
	private final IntersectionElements pIntersection;
	private final DifferenceElements pDifference;
	private final DoubleElements pDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScadGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModuleOrFunction = new ModuleOrFunctionElements();
		this.pUseOrInclude = new UseOrIncludeElements();
		this.pModule = new ModuleElements();
		this.pFunction = new FunctionElements();
		this.pModuleOrFunctionCall = new ModuleOrFunctionCallElements();
		this.pTransformation = new TransformationElements();
		this.pTranslate = new TranslateElements();
		this.pRotate = new RotateElements();
		this.pScale = new ScaleElements();
		this.pShape = new ShapeElements();
		this.pTransformedShape = new TransformedShapeElements();
		this.pTransformedModuleOrFunctionCall = new TransformedModuleOrFunctionCallElements();
		this.pSphere = new SphereElements();
		this.pSphereParams = new SphereParamsElements();
		this.pCylinder = new CylinderElements();
		this.pCylinderParams = new CylinderParamsElements();
		this.pCube = new CubeElements();
		this.pCubeParams = new CubeParamsElements();
		this.pUnion = new UnionElements();
		this.pIntersection = new IntersectionElements();
		this.pDifference = new DifferenceElements();
		this.pDouble = new DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.karalisoft.Scad".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////https://blogs.itemis.com/en/debugging-xtext-grammars-what-to-do-when-your-language-is-ambiguous
	////https://www.euclideanspace.com/software/development/eclipse/xtext/grammar/syntacticPredicates/index.htm
	//Model:
	//	blocks+=(Shape | Module | Function | ModuleOrFunctionCall | UseOrInclude)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModuleOrFunction:
	//	Module | Function;
	public ModuleOrFunctionElements getModuleOrFunctionAccess() {
		return pModuleOrFunction;
	}
	
	public ParserRule getModuleOrFunctionRule() {
		return getModuleOrFunctionAccess().getRule();
	}
	
	//UseOrInclude:
	//	{UseOrInclude} ('use' | 'include') '<' ID '.' ID '>' => ';'*;
	public UseOrIncludeElements getUseOrIncludeAccess() {
		return pUseOrInclude;
	}
	
	public ParserRule getUseOrIncludeRule() {
		return getUseOrIncludeAccess().getRule();
	}
	
	//Module:
	//	{Module} 'module' name=ID '(' ')' ('{' blocks+=(Module | Shape | Function | ModuleOrFunctionCall |
	//	TransformedModuleOrFunctionCall)* '}') => ';'*;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Function:
	//	{Function} 'function' name=ID '(' ')' => ';'*;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//// ModuleOrFunctionCall:
	////	name=[ModuleOrFunction] '(' ')' ';';
	//ModuleOrFunctionCall:
	//	name=ID '(' ')' ';';
	public ModuleOrFunctionCallElements getModuleOrFunctionCallAccess() {
		return pModuleOrFunctionCall;
	}
	
	public ParserRule getModuleOrFunctionCallRule() {
		return getModuleOrFunctionCallAccess().getRule();
	}
	
	//Transformation:
	//	Translate | Scale | Rotate;
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//Translate:
	//	{Translate} ('translate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')');
	public TranslateElements getTranslateAccess() {
		return pTranslate;
	}
	
	public ParserRule getTranslateRule() {
		return getTranslateAccess().getRule();
	}
	
	//Rotate:
	//	{Rotate} ('rotate' '(' '[' x=Double ',' y=Double ',' z=Double ']' ')');
	public RotateElements getRotateAccess() {
		return pRotate;
	}
	
	public ParserRule getRotateRule() {
		return getRotateAccess().getRule();
	}
	
	//Scale:
	//	{Scale} ('scale' '(' ('[' x=Double ',' y=Double ',' z=Double ']' | scale=Double) ')');
	public ScaleElements getScaleAccess() {
		return pScale;
	}
	
	public ParserRule getScaleRule() {
		return getScaleAccess().getRule();
	}
	
	//Shape:
	//	{Shape} impl=(TransformedShape | Union | Intersection | Difference | Sphere | Cylinder | Cube);
	public ShapeElements getShapeAccess() {
		return pShape;
	}
	
	public ParserRule getShapeRule() {
		return getShapeAccess().getRule();
	}
	
	//TransformedShape:
	//	{TransformedShape} translations+=(Translate | Rotate | Scale)+ '{'
	//	impl+=Shape+
	//	'}' => ';'*;
	public TransformedShapeElements getTransformedShapeAccess() {
		return pTransformedShape;
	}
	
	public ParserRule getTransformedShapeRule() {
		return getTransformedShapeAccess().getRule();
	}
	
	//TransformedModuleOrFunctionCall:
	//	{TransformedModuleOrFunctionCall} translations+=(Translate | Rotate | Scale)+ '{'
	//	impl+=ModuleOrFunctionCall+
	//	'}' => ';'*;
	public TransformedModuleOrFunctionCallElements getTransformedModuleOrFunctionCallAccess() {
		return pTransformedModuleOrFunctionCall;
	}
	
	public ParserRule getTransformedModuleOrFunctionCallRule() {
		return getTransformedModuleOrFunctionCallAccess().getRule();
	}
	
	//Sphere:
	//	{Sphere} ('sphere' '(' (sphereParams+=SphereParams (',' sphereParams+=SphereParams)*)?
	//	')' => ';'+);
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//SphereParams:
	//	{SphereParams} ('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'r' '=' r=Double | 'd' '=' d=Double
	//	);
	public SphereParamsElements getSphereParamsAccess() {
		return pSphereParams;
	}
	
	public ParserRule getSphereParamsRule() {
		return getSphereParamsAccess().getRule();
	}
	
	//Cylinder:
	//	{Cylinder} ('cylinder' '(' (cylinderParams+=CylinderParams (',' cylinderParams+=CylinderParams)*)?
	//	')' => ';'+);
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//CylinderParams:
	//	{CylinderParams} ('$fn' '=' fn=Double | '$fa' '=' fa=Double | '$fs' '=' fs=Double | 'h' '=' h=Double | 'r' '='
	//	r=Double | 'r1' '=' r1=Double | 'r2' '=' r2=Double | 'd' '=' d=Double | 'd1' '=' d1=Double | 'd2' '=' d2=Double | (
	//	'center' '=')? center=('true' | 'false'));
	public CylinderParamsElements getCylinderParamsAccess() {
		return pCylinderParams;
	}
	
	public ParserRule getCylinderParamsRule() {
		return getCylinderParamsAccess().getRule();
	}
	
	//Cube:
	//	{Cube} ('cube' '(' (cubeParams+=CubeParams (',' cubeParams+=CubeParams)*)?
	//	')' => ';'+);
	public CubeElements getCubeAccess() {
		return pCube;
	}
	
	public ParserRule getCubeRule() {
		return getCubeAccess().getRule();
	}
	
	//CubeParams:
	//	{CubeParams} (('size' '=')? (size=Double | '[' x=Double ',' y=Double ',' z=Double ']') | ('center' '=')? center=(
	//	'true' | 'false'));
	public CubeParamsElements getCubeParamsAccess() {
		return pCubeParams;
	}
	
	public ParserRule getCubeParamsRule() {
		return getCubeParamsAccess().getRule();
	}
	
	//Union:
	//	{Union} ('union' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}' => ';'*);
	public UnionElements getUnionAccess() {
		return pUnion;
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}
	
	//Intersection:
	//	{Intersection} ('intersection' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)*
	//	'}' => ';'*);
	public IntersectionElements getIntersectionAccess() {
		return pIntersection;
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}
	
	//Difference:
	//	{Difference} ('difference' '(' ')' '{' shapes+=(Shape | ModuleOrFunctionCall | TransformedModuleOrFunctionCall)* '}'
	//	=> ';'*);
	public DifferenceElements getDifferenceAccess() {
		return pDifference;
	}
	
	public ParserRule getDifferenceRule() {
		return getDifferenceAccess().getRule();
	}
	
	//Double ecore::EDoubleObject:
	//	('+' | '-')? (INT ('.' INT)?);
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
